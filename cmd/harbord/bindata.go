// Code generated by go-bindata.
// sources:
// cmd/harbord/static/index.html
// cmd/harbord/static/scripts/harbor.js
// cmd/harbord/static/scripts/harbor.min.js
// cmd/harbord/static/scripts/vendor.js
// cmd/harbord/static/scripts/vendor.min.js
// cmd/harbord/static/styles/harbor.css
// cmd/harbord/static/styles/harbor.min.css
// cmd/harbord/static/styles/vendor.css
// cmd/harbord/static/styles/vendor.min.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdHarbordStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x91\xb1\x6e\x83\x30\x10\x86\x77\x9e\xe2\x7a\x7b\xf0\x0b\x18\x96\xb6\x73\x3b\x74\xe9\x68\xcc\x05\xbb\x75\x6c\xe4\x73\xa8\x50\x94\x77\xaf\x01\x27\x95\x58\xaa\x4c\x9c\xee\xe7\xb3\xbf\x5f\x96\x4f\x2f\x6f\xcf\x1f\x9f\xef\xaf\x60\xd2\xc9\xb5\x55\x25\x97\x2f\xf8\xe1\xa0\xc6\xb1\x41\xa3\x62\x17\x22\x82\x53\x7e\x68\x90\x3c\xb6\x15\x80\x34\xa4\xfa\x65\xc8\x63\xa7\x98\xc0\x44\x3a\x36\x78\xb9\xd4\x31\x84\x74\xbd\x22\x88\x7c\xd0\x1a\x3b\xeb\xbf\x21\x92\x6b\x90\xd3\xec\x88\x0d\x51\xc2\xf2\x3f\x27\x95\xac\x16\x5b\x20\x26\xf2\x7d\x88\xb5\x66\x5e\xf1\x07\xe9\xcd\xf3\x4e\xef\x71\xab\x83\xdf\x81\xf6\xa4\x86\x0c\x1e\xd5\xb4\x84\xf5\xe8\x87\xad\x9b\xb8\x95\x93\x5d\xe8\xe7\x22\xd2\xdb\x09\xce\xf6\x30\x59\xfa\x69\xd0\xa9\x39\x9c\x13\x96\x48\xe4\xec\x76\x21\xeb\x68\xc7\x04\x1c\xf5\x9f\xdf\xba\xba\xd7\xfb\x62\x6c\x65\x59\xb6\xff\x42\xa5\xd5\x1e\x92\x62\x53\xcb\xae\xeb\x9b\xfd\x06\x00\x00\xff\xff\xd0\xc9\x61\x10\xc4\x01\x00\x00")

func cmdHarbordStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_cmdHarbordStaticIndexHtml,
		"cmd/harbord/static/index.html",
	)
}

func cmdHarbordStaticIndexHtml() (*asset, error) {
	bytes, err := cmdHarbordStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/harbord/static/index.html", size: 452, mode: os.FileMode(420), modTime: time.Unix(1443472041, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _cmdHarbordStaticScriptsHarborJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdHarbordStaticScriptsHarborJsBytes() ([]byte, error) {
	return bindataRead(
		_cmdHarbordStaticScriptsHarborJs,
		"cmd/harbord/static/scripts/harbor.js",
	)
}

func cmdHarbordStaticScriptsHarborJs() (*asset, error) {
	bytes, err := cmdHarbordStaticScriptsHarborJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/harbord/static/scripts/harbor.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(1443478216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _cmdHarbordStaticScriptsHarborMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdHarbordStaticScriptsHarborMinJsBytes() ([]byte, error) {
	return bindataRead(
		_cmdHarbordStaticScriptsHarborMinJs,
		"cmd/harbord/static/scripts/harbor.min.js",
	)
}

func cmdHarbordStaticScriptsHarborMinJs() (*asset, error) {
	bytes, err := cmdHarbordStaticScriptsHarborMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/harbord/static/scripts/harbor.min.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(1443478216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _cmdHarbordStaticScriptsVendorJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdHarbordStaticScriptsVendorJsBytes() ([]byte, error) {
	return bindataRead(
		_cmdHarbordStaticScriptsVendorJs,
		"cmd/harbord/static/scripts/vendor.js",
	)
}

func cmdHarbordStaticScriptsVendorJs() (*asset, error) {
	bytes, err := cmdHarbordStaticScriptsVendorJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/harbord/static/scripts/vendor.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(1443478216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _cmdHarbordStaticScriptsVendorMinJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdHarbordStaticScriptsVendorMinJsBytes() ([]byte, error) {
	return bindataRead(
		_cmdHarbordStaticScriptsVendorMinJs,
		"cmd/harbord/static/scripts/vendor.min.js",
	)
}

func cmdHarbordStaticScriptsVendorMinJs() (*asset, error) {
	bytes, err := cmdHarbordStaticScriptsVendorMinJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/harbord/static/scripts/vendor.min.js", size: 0, mode: os.FileMode(420), modTime: time.Unix(1443478216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _cmdHarbordStaticStylesHarborCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdHarbordStaticStylesHarborCssBytes() ([]byte, error) {
	return bindataRead(
		_cmdHarbordStaticStylesHarborCss,
		"cmd/harbord/static/styles/harbor.css",
	)
}

func cmdHarbordStaticStylesHarborCss() (*asset, error) {
	bytes, err := cmdHarbordStaticStylesHarborCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/harbord/static/styles/harbor.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(1443478216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _cmdHarbordStaticStylesHarborMinCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdHarbordStaticStylesHarborMinCssBytes() ([]byte, error) {
	return bindataRead(
		_cmdHarbordStaticStylesHarborMinCss,
		"cmd/harbord/static/styles/harbor.min.css",
	)
}

func cmdHarbordStaticStylesHarborMinCss() (*asset, error) {
	bytes, err := cmdHarbordStaticStylesHarborMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/harbord/static/styles/harbor.min.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(1443478216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _cmdHarbordStaticStylesVendorCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdHarbordStaticStylesVendorCssBytes() ([]byte, error) {
	return bindataRead(
		_cmdHarbordStaticStylesVendorCss,
		"cmd/harbord/static/styles/vendor.css",
	)
}

func cmdHarbordStaticStylesVendorCss() (*asset, error) {
	bytes, err := cmdHarbordStaticStylesVendorCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/harbord/static/styles/vendor.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(1443478216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _cmdHarbordStaticStylesVendorMinCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func cmdHarbordStaticStylesVendorMinCssBytes() ([]byte, error) {
	return bindataRead(
		_cmdHarbordStaticStylesVendorMinCss,
		"cmd/harbord/static/styles/vendor.min.css",
	)
}

func cmdHarbordStaticStylesVendorMinCss() (*asset, error) {
	bytes, err := cmdHarbordStaticStylesVendorMinCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/harbord/static/styles/vendor.min.css", size: 0, mode: os.FileMode(420), modTime: time.Unix(1443478216, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/harbord/static/index.html": cmdHarbordStaticIndexHtml,
	"cmd/harbord/static/scripts/harbor.js": cmdHarbordStaticScriptsHarborJs,
	"cmd/harbord/static/scripts/harbor.min.js": cmdHarbordStaticScriptsHarborMinJs,
	"cmd/harbord/static/scripts/vendor.js": cmdHarbordStaticScriptsVendorJs,
	"cmd/harbord/static/scripts/vendor.min.js": cmdHarbordStaticScriptsVendorMinJs,
	"cmd/harbord/static/styles/harbor.css": cmdHarbordStaticStylesHarborCss,
	"cmd/harbord/static/styles/harbor.min.css": cmdHarbordStaticStylesHarborMinCss,
	"cmd/harbord/static/styles/vendor.css": cmdHarbordStaticStylesVendorCss,
	"cmd/harbord/static/styles/vendor.min.css": cmdHarbordStaticStylesVendorMinCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"harbord": &bintree{nil, map[string]*bintree{
			"static": &bintree{nil, map[string]*bintree{
				"index.html": &bintree{cmdHarbordStaticIndexHtml, map[string]*bintree{
				}},
				"scripts": &bintree{nil, map[string]*bintree{
					"harbor.js": &bintree{cmdHarbordStaticScriptsHarborJs, map[string]*bintree{
					}},
					"harbor.min.js": &bintree{cmdHarbordStaticScriptsHarborMinJs, map[string]*bintree{
					}},
					"vendor.js": &bintree{cmdHarbordStaticScriptsVendorJs, map[string]*bintree{
					}},
					"vendor.min.js": &bintree{cmdHarbordStaticScriptsVendorMinJs, map[string]*bintree{
					}},
				}},
				"styles": &bintree{nil, map[string]*bintree{
					"harbor.css": &bintree{cmdHarbordStaticStylesHarborCss, map[string]*bintree{
					}},
					"harbor.min.css": &bintree{cmdHarbordStaticStylesHarborMinCss, map[string]*bintree{
					}},
					"vendor.css": &bintree{cmdHarbordStaticStylesVendorCss, map[string]*bintree{
					}},
					"vendor.min.css": &bintree{cmdHarbordStaticStylesVendorMinCss, map[string]*bintree{
					}},
				}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

